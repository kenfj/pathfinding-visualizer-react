{"version":3,"sources":["algorithms/NodeType.tsx","algorithms/Dijkstra.tsx","algorithms/Vertex.tsx","components/Node.tsx","components/PathfindingVisualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NodeType","Dijkstra","grid","startNode","endNode","openSet","visited","distance","length","current","pop","isVisited","push","updateNeighbors","nodes","sort","nodeA","nodeB","shift","node","neighbors","i","j","filter","neighbor","isWall","getNeighbors","prevNode","includes","Vertex","nodeType","Infinity","this","Wall","useStyles","makeStyles","theme","item","props","border","gridRow","gridCol","backgroundColor","vertex","Start","End","wall","Node","classes","classWall","className","ref","nodeRef","title","onMouseDown","handleMouseDown","onMouseEnter","handleMouseEnter","onMouseUp","handleMouseUp","container","display","gridTemplateRows","nRows","gridTemplateColumns","nCols","justifyContent","margin","shortestPath","PathfindingVisualizer","p","startEnd","Math","trunc","useState","start","setStart","end","setEnd","initialRefs","Array","from","_","createRef","refs","initialGrid","Default","initialNodeType","setGrid","isMousePressed","setIsMousePressed","isDraggingStart","setIsDraggingStart","isDraggingEnd","setIsDraggingEnd","isUpdatingToWall","setIsUpdatingToWall","updateWall","isStartOrEnd","newType","newNode","newGrid","slice","currentType","updateStart","updateEnd","clear","forEach","row","reset","classList","remove","animate","visitedNodes","setTimeout","add","animateShortestPath","Button","variant","style","textTransform","onClick","path","unshift","backtrackToStart","map","paper","flexGrow","maxWidth","padding","spacing","textAlign","color","fontWeight","App","Paper","elevation","Typography","gutterBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.066d21c7.chunk.js","sourcesContent":["export enum NodeType {\n  Default,\n  Start,\n  End,\n  Wall,\n}\n","import { Vertex } from \"./Vertex\";\n\nexport function Dijkstra(grid: Vertex[][], startNode: Vertex, endNode: Vertex) {\n  const openSet = [startNode]\n  const visited: Vertex[] = []\n  startNode.distance = 0\n\n  while (!!openSet.length) {\n    const current = pop(openSet)\n\n    if (current === endNode) return visited\n\n    current.isVisited = true\n    visited.push(current)\n\n    updateNeighbors(current)\n  }\n\n  // works like a priority queue\n  function pop(nodes: Vertex[]) {\n    nodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance)\n    return nodes.shift()!\n  }\n\n  function updateNeighbors(node: Vertex) {\n    const neighbors = getNeighbors(node)\n\n    for (const neighbor of neighbors) {\n      neighbor.distance = node.distance + 1\n      neighbor.prevNode = node\n\n      if (!openSet.includes(neighbor))\n        openSet.push(neighbor)\n    }\n  }\n\n  function getNeighbors(node: Vertex) {\n    const neighbors = []\n    const { i, j } = node\n\n    if (i > 0)\n      neighbors.push(grid[i - 1][j])\n    if (i < grid.length - 1)\n      neighbors.push(grid[i + 1][j])\n    if (j > 0)\n      neighbors.push(grid[i][j - 1])\n    if (j < grid[0].length - 1)\n      neighbors.push(grid[i][j + 1])\n\n    return neighbors.filter(neighbor =>\n      !neighbor.isWall() &&\n      !neighbor.isVisited\n    )\n  }\n}\n\nexport function backtrackToStart(node: Vertex) {\n  const path = [node]\n\n  while (node.prevNode) {\n    path.unshift(node.prevNode)\n    node = node.prevNode!\n  }\n\n  return path\n}\n","import { NodeType } from \"./NodeType\";\n\nexport class Vertex {\n  constructor(\n    readonly i: number,\n    readonly j: number,\n    public nodeType: NodeType,\n    public distance: number = Infinity,\n    public prevNode: Vertex | null = null,\n    public isVisited: boolean = false,\n  ) { }\n\n  public reset() {\n    this.distance = Infinity\n    this.prevNode = null\n    this.isVisited = false\n  }\n\n  public isWall() {\n    return this.nodeType === NodeType.Wall\n  }\n}\n","import { makeStyles, Theme } from '@material-ui/core';\nimport React, { RefObject } from 'react';\nimport { NodeType } from '../algorithms/NodeType';\nimport { Vertex } from '../algorithms/Vertex';\n\nconst useStyles = makeStyles<Theme, Props>((theme) => ({\n  item: props => ({\n    border: \"1px solid lightgray\",\n    gridRow: `${props.i + 1}`,\n    gridCol: `${props.j + 1}`,\n    backgroundColor: `${props.vertex.nodeType === NodeType.Start ? 'green' : props.vertex.nodeType === NodeType.End ? 'red' : ''}`\n  }),\n  wall: {\n    backgroundColor: 'black'\n  },\n}));\n\ntype Props = {\n  i: number\n  j: number\n  nodeRef: RefObject<HTMLDivElement>\n  vertex: Vertex\n  handleMouseDown: (i: number, j: number) => void\n  handleMouseEnter: (i: number, j: number) => void\n  handleMouseUp: (i: number, j: number) => void\n}\n\nfunction Node(props: Props) {\n  const classes = useStyles(props);\n\n  const handleMouseDown = () => {\n    props.handleMouseDown(props.i, props.j)\n  }\n\n  const handleMouseEnter = () => {\n    props.handleMouseEnter(props.i, props.j)\n  }\n\n  const handleMouseUp = () => {\n    props.handleMouseUp(props.i, props.j)\n  }\n\n  const classWall = props.vertex.nodeType === NodeType.Wall ? classes.wall : ''\n\n  return (\n    <div\n      className={`${classes.item} ${classWall}`}\n      ref={props.nodeRef}\n      title={`${props.i}, ${props.j}`}\n      onMouseDown={handleMouseDown}\n      onMouseEnter={handleMouseEnter}\n      onMouseUp={handleMouseUp}\n    />\n  )\n}\n\nexport default Node\n","import { Button, makeStyles, Theme } from '@material-ui/core';\nimport React, { createRef, RefObject, useState } from 'react';\nimport { backtrackToStart, Dijkstra } from '../algorithms/Dijkstra';\nimport { NodeType } from '../algorithms/NodeType';\nimport { Vertex } from '../algorithms/Vertex';\nimport Node from './Node';\n\nconst useStyles = makeStyles<Theme, Props>((theme) => ({\n  container: props => ({\n    display: 'grid',\n    gridTemplateRows: `repeat(${props.nRows}, 20px)`,\n    gridTemplateColumns: `repeat(${props.nCols}, 20px)`,\n    justifyContent: 'center',\n    margin: '50px auto',\n  }),\n  visited: {\n    backgroundColor: 'lightgreen'\n  },\n  shortestPath: {\n    backgroundColor: 'yellow'\n  },\n}));\n\ntype Coordinates = { i: number, j: number }\n\nconst initialStartEnd = (p: Props): Coordinates[] => {\n  return [\n    { i: Math.trunc(p.nRows / 2), j: Math.trunc(p.nCols / 5) },\n    { i: Math.trunc(p.nRows / 2), j: Math.trunc(p.nCols * 4 / 5) - 1 }\n  ]\n}\n\nconst initialNodeType = (i: number, j: number, start: Coordinates, end: Coordinates) => {\n  return (\n    i === start.i && j === start.j ? NodeType.Start :\n      i === end.i && j === end.j ? NodeType.End :\n        NodeType.Default\n  )\n}\n\ntype Props = {\n  nRows: number\n  nCols: number\n}\n\nfunction PathfindingVisualizer(props: Props) {\n  const classes = useStyles(props);\n\n  const startEnd = initialStartEnd(props)\n  const [start, setStart] = useState<Coordinates>(startEnd[0]);\n  const [end, setEnd] = useState<Coordinates>(startEnd[1]);\n\n  const initialRefs =\n    Array.from({ length: props.nRows }, _ =>\n      Array.from({ length: props.nCols }, _ =>\n        createRef<HTMLDivElement>()\n      )\n    )\n  const [refs] = useState<RefObject<HTMLDivElement>[][]>(initialRefs);\n\n  const initialGrid =\n    Array.from({ length: props.nRows }, (_, i) =>\n      Array.from({ length: props.nCols }, (_, j) => {\n        const nodeType = initialNodeType(i, j, start, end)\n        return new Vertex(i, j, nodeType)\n      })\n    )\n  const [grid, setGrid] = useState<Vertex[][]>(initialGrid);\n\n  const [isMousePressed, setIsMousePressed] = useState<boolean>(false);\n  const [isDraggingStart, setIsDraggingStart] = useState<boolean>(false);\n  const [isDraggingEnd, setIsDraggingEnd] = useState<boolean>(false);\n  const [isUpdatingToWall, setIsUpdatingToWall] = useState<boolean>(false);\n\n  const updateStart = (i: number, j: number) => {\n    if (grid[i][j].nodeType === NodeType.End) return\n\n    const newGrid = grid.slice()\n\n    newGrid[start.i][start.j] = new Vertex(start.i, start.j, NodeType.Default)\n    newGrid[i][j] = new Vertex(i, j, NodeType.Start)\n\n    setGrid(newGrid)\n    setStart({ i, j })\n  }\n\n  const updateEnd = (i: number, j: number) => {\n    if (grid[i][j].nodeType === NodeType.Start) return\n\n    const newGrid = grid.slice()\n\n    newGrid[end.i][end.j] = new Vertex(end.i, end.j, NodeType.Default)\n    newGrid[i][j] = new Vertex(i, j, NodeType.End)\n\n    setGrid(newGrid)\n    setEnd({ i, j })\n  }\n\n  const updateWall = (i: number, j: number) => {\n    if (isStartOrEnd(i, j)) return\n\n    const newType = isUpdatingToWall ? NodeType.Wall : NodeType.Default\n    const newNode = new Vertex(i, j, newType)\n\n    const newGrid = grid.slice()\n    newGrid[i][j] = newNode\n\n    setGrid(newGrid)\n  }\n\n  const isStartOrEnd = (i: number, j: number) => {\n    const currentType = grid[i][j].nodeType\n    return (currentType === NodeType.Start || currentType === NodeType.End)\n  }\n\n  const handleMouseDown = (i: number, j: number) => {\n    setIsMousePressed(true)\n\n    if (grid[i][j].nodeType === NodeType.Start) {\n      setIsDraggingStart(true)\n    } else if (grid[i][j].nodeType === NodeType.End) {\n      setIsDraggingEnd(true)\n    } else {\n      updateWall(i, j)\n    }\n  }\n\n  const handleMouseEnter = (i: number, j: number) => {\n    setIsUpdatingToWall(grid[i][j].nodeType !== NodeType.Wall)\n    if (!isMousePressed) return\n\n    if (isDraggingStart) {\n      updateStart(i, j)\n    } else if (isDraggingEnd) {\n      updateEnd(i, j)\n    } else {\n      updateWall(i, j)\n    }\n  }\n\n  const handleMouseUp = (i: number, j: number) => {\n    setIsMousePressed(false)\n\n    if (isDraggingStart || isDraggingEnd)\n      clear()\n\n    setIsDraggingStart(false)\n    setIsDraggingEnd(false)\n    setIsUpdatingToWall(grid[i][j].nodeType !== NodeType.Wall)\n  }\n\n  const clear = () => {\n    refs.forEach((row, i) =>\n      row.forEach((ref, j) => {\n        grid[i][j].reset()\n        ref.current?.classList.remove(classes.visited, classes.shortestPath)\n      })\n    )\n  }\n\n  const visualize = () => {\n    clear()\n\n    const startNode = grid[start.i][start.j]\n    const endNode = grid[end.i][end.j]\n    const visitedNodes = Dijkstra(grid, startNode, endNode);\n    const shortestPath = backtrackToStart(endNode);\n\n    animate(visitedNodes!, shortestPath);\n  }\n\n  const animate = (visitedNodes: Vertex[], shortestPath: Vertex[]) => {\n    for (let i = 1; i < visitedNodes.length - 1; i++) {\n      setTimeout(() => {\n        const node = visitedNodes[i];\n        const ref = refs[node.i][node.j].current!\n        ref.classList.add(classes.visited)\n      }, 10 * i);\n\n      if (i === visitedNodes.length - 2) {\n        setTimeout(() => {\n          animateShortestPath(shortestPath);\n        }, 10 * i);\n        return;\n      }\n    }\n  }\n\n  const animateShortestPath = (shortestPath: Vertex[]) => {\n    for (let i = 1; i < shortestPath.length - 1; i++) {\n      setTimeout(() => {\n        const node = shortestPath[i];\n        const ref = refs[node.i][node.j].current!\n        ref.classList.add(classes.shortestPath)\n      }, 50 * i);\n    }\n  }\n\n  return (\n    <>\n      <Button variant=\"contained\" style={{ textTransform: 'none' }} onClick={visualize}>\n        Visualize Dijkstra's Algorithm\n      </Button>\n      <div className={classes.container}>\n        {\n          refs.map((row, i) =>\n            row.map((node, j) =>\n              <Node\n                i={i} j={j}\n                key={`node-${i}-${j}`}\n                nodeRef={node}\n                vertex={grid[i][j]}\n                handleMouseDown={handleMouseDown}\n                handleMouseEnter={handleMouseEnter}\n                handleMouseUp={handleMouseUp}\n              />\n            )\n          )\n        }\n      </div>\n    </>\n  )\n}\n\nexport default PathfindingVisualizer\n","import { makeStyles, Paper, Typography } from '@material-ui/core';\nimport React from 'react';\nimport PathfindingVisualizer from './components/PathfindingVisualizer';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    flexGrow: 1,\n    maxWidth: 700,\n    margin: \"50px auto\",\n    padding: theme.spacing(5),\n    textAlign: 'center',\n  },\n  start: {\n    color: 'green',\n    fontWeight: 'bold',\n  },\n  end: {\n    color: 'red',\n    fontWeight: 'bold',\n  },\n  wall: {\n    color: 'black',\n    fontWeight: 'bold',\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <Paper elevation={5} className={classes.paper}>\n      <h1>Pathfinding Visualizer</h1>\n      <Typography variant=\"body1\" gutterBottom>\n        Click to create <span className={classes.wall}>WALL</span><br />\n        Drag <span className={classes.start}>START</span> and <span className={classes.end}>END</span>\n      </Typography>\n      <PathfindingVisualizer nRows={20} nCols={30} />\n    </Paper >\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}